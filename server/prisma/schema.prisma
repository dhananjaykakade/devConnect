generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  userId    String   @db.ObjectId
  user      User     @relation("UserTokens", fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String         @unique
  name          String
  email         String         @unique
  password      String
  bio           String?
  avatar        String?
  techStack     String[]
  followers     Follow[]       @relation("UserFollowers") // Users who follow this user
  following     Follow[]       @relation("UserFollowing") // Users this user follows
  posts         Post[]
  comments      Comment[]
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[] @relation("UserTokens")
    receivedNotifications Notification[] @relation("UserReceivedNotifications")
  sentNotifications     Notification[] @relation("UserSentNotifications")
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId

  follower  User     @relation("UserFollowing", fields: [followerId], references: [id])
  following User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  techTags  String[]
  media     String
  authorId  String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  likes     String[]  @db.ObjectId
  comments  Comment[]
  flagged   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([createdAt])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  authorId  String   @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId     String   @db.ObjectId
  reporterId String   @db.ObjectId
  reason     String
  createdAt  DateTime @default(now())
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String           @db.ObjectId
  senderId   String?          @db.ObjectId        // optional sender (null for system notifications)

  type       NotificationType
  message    String
  link       String?                               // e.g., /post/xyz or /user/abc
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  // Relations
  receiver   User             @relation("UserReceivedNotifications", fields: [receiverId], references: [id])
  sender     User?            @relation("UserSentNotifications", fields: [senderId], references: [id])

  @@index([receiverId, isRead])                    // optimize unread fetch
  @@index([type])                                  // optional: filter by notification type
}


enum Role {
  USER
  ADMIN
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  SYSTEM
  TEST
}
