generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  userId    String   @db.ObjectId
  user      User     @relation("UserTokens", fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String         @unique
  email         String         @unique
  password      String
  bio           String?
  avatar        String?
  techStack     String[]
  followers     String[]       @db.ObjectId
  following     String[]       @db.ObjectId
  posts         Post[]
  comments      Comment[]
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[] @relation("UserTokens")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  techTags  String[]
  authorId  String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  likes     String[]  @db.ObjectId
  comments  Comment[]
  flagged   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  authorId  String   @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId     String   @db.ObjectId
  reporterId String   @db.ObjectId
  reason     String
  createdAt  DateTime @default(now())
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String           @db.ObjectId
  type       NotificationType
  message    String
  link       String?
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
}

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MENTION
}
